tls struct: {
	host_rsp
	guest_rsp
	syscall dispatch info,
	host_ptr
	callback slot dispatch info (array)
}

; call in thunk
call_in_thunk:
mov r11, guest_entry_rip_baked ("getprocaddr")
mov r10, tls_struct_ptr_baked ("host")
mov rax, call_impl
jmp rax



call_impl: ;(should be at fixed address, so that it the return address which is left in child stack is fixed)
mov [gs:0x18], r10
mov [r10 + host_rsp], rsp
mov rsp, [r10 + guest_initial_rsp]
call r11
mov rsp, [r10 + host_rsp]
mov [gs:0x18], 0
ret

sys_enter: ;nr in rax (should be at fixed address, because will be burned into executables)
mov r10, [gs:0x18]
mov [r10 + guest_rsp], rsp
mov rsp, [r10 + host_rsp]
push rax ; argument 7: syscall number
mov rax, [r10 + syscall_dispatch]
call rax
mov rsp, [r10 + guest_rsp]
ret

call_out_thunk: (could be in a fixed address to go with extcall_enter)
mov al, slot_number_baked
jmp extcall_enter

extcall_enter: ; very similar to sys_enter
mov r10, [gs:0x18]
mov [r10 + guest_rsp], rsp
mov rsp, [r10 + host_rsp]
add al, 4 ; seek past host_rsp, guest_rsp, dispatch
mov r11, [r10 + al * 8] ; get slot ptr
sub rsp, 8 ; align
call r11
mov rsp, [r10 + guest_rsp]
ret













