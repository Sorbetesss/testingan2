//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class LuaDLL : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LuaDLL(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LuaDLL obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LuaDLL() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LuaWrapPINVOKE.delete_LuaDLL(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static int lua_gc(System.IntPtr luaState, LuaGCOptions what, int data) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_gc(luaState, (int)what, data);
    return ret;
  }

  public static string lua_typename(System.IntPtr luaState, LuaTypes type) {
    string ret = LuaWrapPINVOKE.LuaDLL_lua_typename(luaState, (int)type);
    return ret;
  }

  public static string luaL_typename(System.IntPtr luaState, int stackPos) {
    string ret = LuaWrapPINVOKE.LuaDLL_luaL_typename(luaState, stackPos);
    return ret;
  }

  public static void luaL_error(System.IntPtr luaState, string message) {
    LuaWrapPINVOKE.LuaDLL_luaL_error(luaState, message);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void luaL_where(System.IntPtr luaState, int level) {
    LuaWrapPINVOKE.LuaDLL_luaL_where(luaState, level);
  }

  public static System.IntPtr luaL_newstate() { 
                System.IntPtr cPtr = LuaWrapPINVOKE.LuaDLL_luaL_newstate(); 
                return cPtr; 
        }

  public static void lua_close(System.IntPtr luaState) {
    LuaWrapPINVOKE.LuaDLL_lua_close(luaState);
  }

  public static void luaL_openlibs(System.IntPtr luaState) {
    LuaWrapPINVOKE.LuaDLL_luaL_openlibs(luaState);
  }

  public static int luaL_loadstring(System.IntPtr luaState, string chunk) {
    int ret = LuaWrapPINVOKE.LuaDLL_luaL_loadstring(luaState, chunk);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int luaL_dostring(System.IntPtr luaState, string chunk) {
    int ret = LuaWrapPINVOKE.LuaDLL_luaL_dostring(luaState, chunk);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int lua_dostring(System.IntPtr luaState, string chunk) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_dostring(luaState, chunk);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void lua_createtable(System.IntPtr luaState, int narr, int nrec) {
    LuaWrapPINVOKE.LuaDLL_lua_createtable(luaState, narr, nrec);
  }

  public static void lua_newtable(System.IntPtr luaState) {
    LuaWrapPINVOKE.LuaDLL_lua_newtable(luaState);
  }

  public static int luaL_dofile(System.IntPtr luaState, string fileName) {
    int ret = LuaWrapPINVOKE.LuaDLL_luaL_dofile(luaState, fileName);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void lua_getglobal(System.IntPtr luaState, string name) {
    LuaWrapPINVOKE.LuaDLL_lua_getglobal(luaState, name);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void lua_setglobal(System.IntPtr luaState, string name) {
    LuaWrapPINVOKE.LuaDLL_lua_setglobal(luaState, name);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void lua_settop(System.IntPtr luaState, int newTop) {
    LuaWrapPINVOKE.LuaDLL_lua_settop(luaState, newTop);
  }

  public static void lua_pop(System.IntPtr luaState, int amount) {
    LuaWrapPINVOKE.LuaDLL_lua_pop(luaState, amount);
  }

  public static void lua_insert(System.IntPtr luaState, int newTop) {
    LuaWrapPINVOKE.LuaDLL_lua_insert(luaState, newTop);
  }

  public static void lua_remove(System.IntPtr luaState, int index) {
    LuaWrapPINVOKE.LuaDLL_lua_remove(luaState, index);
  }

  public static void lua_gettable(System.IntPtr luaState, int index) {
    LuaWrapPINVOKE.LuaDLL_lua_gettable(luaState, index);
  }

  public static void lua_rawget(System.IntPtr luaState, int index) {
    LuaWrapPINVOKE.LuaDLL_lua_rawget(luaState, index);
  }

  public static void lua_settable(System.IntPtr luaState, int index) {
    LuaWrapPINVOKE.LuaDLL_lua_settable(luaState, index);
  }

  public static void lua_rawset(System.IntPtr luaState, int index) {
    LuaWrapPINVOKE.LuaDLL_lua_rawset(luaState, index);
  }

  public static System.IntPtr lua_newthread(System.IntPtr luaState) { 
                System.IntPtr cPtr = LuaWrapPINVOKE.LuaDLL_lua_newthread(luaState); 
                return cPtr; 
        }

  public static int lua_resume(System.IntPtr luaState, int narg) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_resume(luaState, narg);
    return ret;
  }

  public static int lua_yield(System.IntPtr luaState, int nresults) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_yield(luaState, nresults);
    return ret;
  }

  public static void lua_setmetatable(System.IntPtr luaState, int objIndex) {
    LuaWrapPINVOKE.LuaDLL_lua_setmetatable(luaState, objIndex);
  }

  public static int lua_getmetatable(System.IntPtr luaState, int objIndex) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_getmetatable(luaState, objIndex);
    return ret;
  }

  public static int lua_equal(System.IntPtr luaState, int index1, int index2) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_equal(luaState, index1, index2);
    return ret;
  }

  public static void lua_pushvalue(System.IntPtr luaState, int index) {
    LuaWrapPINVOKE.LuaDLL_lua_pushvalue(luaState, index);
  }

  public static void lua_replace(System.IntPtr luaState, int index) {
    LuaWrapPINVOKE.LuaDLL_lua_replace(luaState, index);
  }

  public static int lua_gettop(System.IntPtr luaState) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_gettop(luaState);
    return ret;
  }

  public static LuaTypes lua_type(System.IntPtr luaState, int index) {
    LuaTypes ret = (LuaTypes)LuaWrapPINVOKE.LuaDLL_lua_type(luaState, index);
    return ret;
  }

  public static bool lua_isnil(System.IntPtr luaState, int index) {
    bool ret = LuaWrapPINVOKE.LuaDLL_lua_isnil(luaState, index);
    return ret;
  }

  public static bool lua_isnumber(System.IntPtr luaState, int index) {
    bool ret = LuaWrapPINVOKE.LuaDLL_lua_isnumber(luaState, index);
    return ret;
  }

  public static bool lua_isboolean(System.IntPtr luaState, int index) {
    bool ret = LuaWrapPINVOKE.LuaDLL_lua_isboolean(luaState, index);
    return ret;
  }

  public static int luaL_ref(System.IntPtr luaState, int registryIndex) {
    int ret = LuaWrapPINVOKE.LuaDLL_luaL_ref(luaState, registryIndex);
    return ret;
  }

  public static int lua_ref(System.IntPtr luaState, int lockRef) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_ref(luaState, lockRef);
    return ret;
  }

  public static void lua_rawgeti(System.IntPtr luaState, int tableIndex, int index) {
    LuaWrapPINVOKE.LuaDLL_lua_rawgeti(luaState, tableIndex, index);
  }

  public static void lua_rawseti(System.IntPtr luaState, int tableIndex, int index) {
    LuaWrapPINVOKE.LuaDLL_lua_rawseti(luaState, tableIndex, index);
  }

  public static System.IntPtr lua_newuserdata(System.IntPtr luaState, int size) { 
                System.IntPtr cPtr = LuaWrapPINVOKE.LuaDLL_lua_newuserdata(luaState, size); 
                return cPtr; 
        }

  public static System.IntPtr lua_touserdata(System.IntPtr luaState, int index) { 
                System.IntPtr cPtr = LuaWrapPINVOKE.LuaDLL_lua_touserdata(luaState, index); 
                return cPtr; 
        }

  public static void lua_getref(System.IntPtr luaState, int reference) {
    LuaWrapPINVOKE.LuaDLL_lua_getref(luaState, reference);
  }

  public static void lua_unref(System.IntPtr luaState, int reference) {
    LuaWrapPINVOKE.LuaDLL_lua_unref(luaState, reference);
  }

  public static bool lua_isstring(System.IntPtr luaState, int index) {
    bool ret = LuaWrapPINVOKE.LuaDLL_lua_isstring(luaState, index);
    return ret;
  }

  public static bool lua_iscfunction(System.IntPtr luaState, int index) {
    bool ret = LuaWrapPINVOKE.LuaDLL_lua_iscfunction(luaState, index);
    return ret;
  }

  public static void lua_pushnil(System.IntPtr luaState) {
    LuaWrapPINVOKE.LuaDLL_lua_pushnil(luaState);
  }

  public static void lua_call(System.IntPtr luaState, int nArgs, int nResults) {
    LuaWrapPINVOKE.LuaDLL_lua_call(luaState, nArgs, nResults);
  }

  public static int lua_pcall(System.IntPtr luaState, int nArgs, int nResults, int errfunc) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_pcall(luaState, nArgs, nResults, errfunc);
    return ret;
  }

  public static double lua_tonumber(System.IntPtr luaState, int index) {
    double ret = LuaWrapPINVOKE.LuaDLL_lua_tonumber(luaState, index);
    return ret;
  }

  public static bool lua_toboolean(System.IntPtr luaState, int index) {
    bool ret = LuaWrapPINVOKE.LuaDLL_lua_toboolean(luaState, index);
    return ret;
  }

  public static string lua_tostring(System.IntPtr luaState, int index) {
    string ret = LuaWrapPINVOKE.LuaDLL_lua_tostring(luaState, index);
    return ret;
  }

  public static void lua_atpanic(System.IntPtr luaState, LuaCallback panicf) {
    LuaWrapPINVOKE.LuaDLL_lua_atpanic(luaState, LuaCallback.getCPtr(panicf));
  }

  public static void lua_pushstdcallcfunction(System.IntPtr luaState, LuaCallback function) {
    LuaWrapPINVOKE.LuaDLL_lua_pushstdcallcfunction(luaState, LuaCallback.getCPtr(function));
  }

  public static void lua_pushnumber(System.IntPtr luaState, double number) {
    LuaWrapPINVOKE.LuaDLL_lua_pushnumber(luaState, number);
  }

  public static void lua_pushboolean(System.IntPtr luaState, bool value) {
    LuaWrapPINVOKE.LuaDLL_lua_pushboolean(luaState, value);
  }

  public static void lua_pushstring(System.IntPtr luaState, string str) {
    LuaWrapPINVOKE.LuaDLL_lua_pushstring(luaState, str);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int luaL_newmetatable(System.IntPtr luaState, string meta) {
    int ret = LuaWrapPINVOKE.LuaDLL_luaL_newmetatable(luaState, meta);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void lua_getfield(System.IntPtr luaState, int stackPos, string meta) {
    LuaWrapPINVOKE.LuaDLL_lua_getfield(luaState, stackPos, meta);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void luaL_getmetatable(System.IntPtr luaState, string meta) {
    LuaWrapPINVOKE.LuaDLL_luaL_getmetatable(luaState, meta);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public static System.IntPtr luaL_checkudata(System.IntPtr luaState, int stackPos, string meta) { 
                System.IntPtr cPtr = LuaWrapPINVOKE.LuaDLL_luaL_checkudata(luaState, stackPos, meta);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve(); 
                return cPtr; 
        }

  public static bool luaL_getmetafield(System.IntPtr luaState, int stackPos, string field) {
    bool ret = LuaWrapPINVOKE.LuaDLL_luaL_getmetafield(luaState, stackPos, field);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int luaL_loadbuffer(System.IntPtr luaState, string buff, string name) {
    int ret = LuaWrapPINVOKE.LuaDLL_luaL_loadbuffer(luaState, buff, name);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int luaL_loadfile(System.IntPtr luaState, string filename) {
    int ret = LuaWrapPINVOKE.LuaDLL_luaL_loadfile(luaState, filename);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void lua_error(System.IntPtr luaState) {
    LuaWrapPINVOKE.LuaDLL_lua_error(luaState);
  }

  public static bool lua_checkstack(System.IntPtr luaState, int extra) {
    bool ret = LuaWrapPINVOKE.LuaDLL_lua_checkstack(luaState, extra);
    return ret;
  }

  public static int lua_next(System.IntPtr luaState, int index) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_next(luaState, index);
    return ret;
  }

  public static void lua_pushlightuserdata(System.IntPtr luaState, System.IntPtr udata) {
    LuaWrapPINVOKE.LuaDLL_lua_pushlightuserdata(luaState, udata);
  }

  public static int luanet_rawnetobj(System.IntPtr luaState, int obj) {
    int ret = LuaWrapPINVOKE.LuaDLL_luanet_rawnetobj(luaState, obj);
    return ret;
  }

  public static int lua_sethook(System.IntPtr luaState, LuaHook hook, int mask, int count) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_sethook(luaState, LuaHook.getCPtr(hook), mask, count);
    return ret;
  }

  public static int lua_gethookmask(System.IntPtr luaState) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_gethookmask(luaState);
    return ret;
  }

  public static int lua_gethookcount(System.IntPtr luaState) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_gethookcount(luaState);
    return ret;
  }

  public static int lua_getstack(System.IntPtr luaState, int level, System.IntPtr luaDebug) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_getstack(luaState, level, luaDebug);
    return ret;
  }

  public static int lua_getinfo(System.IntPtr luaState, string what, System.IntPtr luaDebug) {
    int ret = LuaWrapPINVOKE.LuaDLL_lua_getinfo(luaState, what, luaDebug);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string lua_getlocal(System.IntPtr luaState, System.IntPtr luaDebug, int n) {
    string ret = LuaWrapPINVOKE.LuaDLL_lua_getlocal(luaState, luaDebug, n);
    return ret;
  }

  public static string lua_setlocal(System.IntPtr luaState, System.IntPtr luaDebug, int n) {
    string ret = LuaWrapPINVOKE.LuaDLL_lua_setlocal(luaState, luaDebug, n);
    return ret;
  }

  public static string lua_getupvalue(System.IntPtr luaState, int funcindex, int n) {
    string ret = LuaWrapPINVOKE.LuaDLL_lua_getupvalue(luaState, funcindex, n);
    return ret;
  }

  public static string lua_setupvalue(System.IntPtr luaState, int funcindex, int n) {
    string ret = LuaWrapPINVOKE.LuaDLL_lua_setupvalue(luaState, funcindex, n);
    return ret;
  }

  public static int luanet_checkudata(System.IntPtr luaState, int ud, string tname) {
    int ret = LuaWrapPINVOKE.LuaDLL_luanet_checkudata(luaState, ud, tname);
    if (LuaWrapPINVOKE.SWIGPendingException.Pending) throw LuaWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool luaL_checkmetatable(System.IntPtr luaState, int index) {
    bool ret = LuaWrapPINVOKE.LuaDLL_luaL_checkmetatable(luaState, index);
    return ret;
  }

  public static System.IntPtr luanet_gettag() { 
                System.IntPtr cPtr = LuaWrapPINVOKE.LuaDLL_luanet_gettag(); 
                return cPtr; 
        }

  public static void luanet_newudata(System.IntPtr luaState, int val) {
    LuaWrapPINVOKE.LuaDLL_luanet_newudata(luaState, val);
  }

  public static int luanet_tonetobject(System.IntPtr luaState, int index) {
    int ret = LuaWrapPINVOKE.LuaDLL_luanet_tonetobject(luaState, index);
    return ret;
  }

  public LuaDLL() : this(LuaWrapPINVOKE.new_LuaDLL(), true) {
  }

}
