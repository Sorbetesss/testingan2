/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_LuaWrap(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_LuaWrap(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_LuaWrap(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include <string>


    #include "../LuaDLL.hpp"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Lua511_wrap.h"

SwigDirector_LuaCallback::SwigDirector_LuaCallback() : Lua511::LuaCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_LuaCallback::~SwigDirector_LuaCallback() {
  
}


int SwigDirector_LuaCallback::runCallback(lua_State *l) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void* jl = 0 ;
  
  if (!swig_callbackrunCallback) {
    return Lua511::LuaCallback::runCallback(l);
  } else {
    jl = (void *) l; 
    jresult = (int) swig_callbackrunCallback(jl);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_LuaCallback::swig_connect_director(SWIG_Callback0_t callbackrunCallback) {
  swig_callbackrunCallback = callbackrunCallback;
}

void SwigDirector_LuaCallback::swig_init_callbacks() {
  swig_callbackrunCallback = 0;
}

SwigDirector_LuaHook::SwigDirector_LuaHook() : Lua511::LuaHook(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_LuaHook::~SwigDirector_LuaHook() {
  
}


int SwigDirector_LuaHook::runHook(lua_State *l, lua_State *debug) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void* jl = 0 ;
  void* jdebug = 0 ;
  
  if (!swig_callbackrunHook) {
    return Lua511::LuaHook::runHook(l,debug);
  } else {
    jl = (void *) l; 
    jdebug = (void *) debug; 
    jresult = (int) swig_callbackrunHook(jl, jdebug);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_LuaHook::swig_connect_director(SWIG_Callback0_t callbackrunHook) {
  swig_callbackrunHook = callbackrunHook;
}

void SwigDirector_LuaHook::swig_init_callbacks() {
  swig_callbackrunHook = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_delete_LuaCallback(void * jarg1) {
  Lua511::LuaCallback *arg1 = (Lua511::LuaCallback *) 0 ;
  
  arg1 = (Lua511::LuaCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaCallback_runCallback(void * jarg1, void* jarg2) {
  int jresult ;
  Lua511::LuaCallback *arg1 = (Lua511::LuaCallback *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  int result;
  
  arg1 = (Lua511::LuaCallback *)jarg1; 
  arg2 = (lua_State *)jarg2; /* IntPtr */ 
  result = (int)(arg1)->runCallback(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaCallback_runCallbackSwigExplicitLuaCallback(void * jarg1, void* jarg2) {
  int jresult ;
  Lua511::LuaCallback *arg1 = (Lua511::LuaCallback *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  int result;
  
  arg1 = (Lua511::LuaCallback *)jarg1; 
  arg2 = (lua_State *)jarg2; /* IntPtr */ 
  result = (int)(arg1)->Lua511::LuaCallback::runCallback(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LuaCallback() {
  void * jresult ;
  Lua511::LuaCallback *result = 0 ;
  
  result = (Lua511::LuaCallback *)new SwigDirector_LuaCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaCallback_director_connect(void *objarg, SwigDirector_LuaCallback::SWIG_Callback0_t callback0) {
  Lua511::LuaCallback *obj = (Lua511::LuaCallback *)objarg;
  SwigDirector_LuaCallback *director = dynamic_cast<SwigDirector_LuaCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LuaHook(void * jarg1) {
  Lua511::LuaHook *arg1 = (Lua511::LuaHook *) 0 ;
  
  arg1 = (Lua511::LuaHook *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaHook_runHook(void * jarg1, void* jarg2, void* jarg3) {
  int jresult ;
  Lua511::LuaHook *arg1 = (Lua511::LuaHook *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  lua_State *arg3 = (lua_State *) 0 ;
  int result;
  
  arg1 = (Lua511::LuaHook *)jarg1; 
  arg2 = (lua_State *)jarg2; /* IntPtr */ 
  arg3 = (lua_State *)jarg3; /* IntPtr */ 
  result = (int)(arg1)->runHook(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaHook_runHookSwigExplicitLuaHook(void * jarg1, void* jarg2, void* jarg3) {
  int jresult ;
  Lua511::LuaHook *arg1 = (Lua511::LuaHook *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  lua_State *arg3 = (lua_State *) 0 ;
  int result;
  
  arg1 = (Lua511::LuaHook *)jarg1; 
  arg2 = (lua_State *)jarg2; /* IntPtr */ 
  arg3 = (lua_State *)jarg3; /* IntPtr */ 
  result = (int)(arg1)->Lua511::LuaHook::runHook(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LuaHook() {
  void * jresult ;
  Lua511::LuaHook *result = 0 ;
  
  result = (Lua511::LuaHook *)new SwigDirector_LuaHook();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaHook_director_connect(void *objarg, SwigDirector_LuaHook::SWIG_Callback0_t callback0) {
  Lua511::LuaHook *obj = (Lua511::LuaHook *)objarg;
  SwigDirector_LuaHook *director = dynamic_cast<SwigDirector_LuaHook *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_gc(void* jarg1, int jarg2, int jarg3) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  Lua511::LuaGCOptions arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (Lua511::LuaGCOptions)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)Lua511::LuaDLL::lua_gc(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LuaDLL_lua_typename(void* jarg1, int jarg2) {
  char * jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  Lua511::LuaTypes arg2 ;
  std::string result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (Lua511::LuaTypes)jarg2; 
  result = Lua511::LuaDLL::lua_typename(arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LuaDLL_luaL_typename(void* jarg1, int jarg2) {
  char * jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = Lua511::LuaDLL::luaL_typename(arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_luaL_error(void* jarg1, char * jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  Lua511::LuaDLL::luaL_error(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_luaL_where(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::luaL_where(arg1,arg2);
}


SWIGEXPORT void* SWIGSTDCALL CSharp_LuaDLL_luaL_newstate() {
  void* jresult ;
  lua_State *result = 0 ;
  
  result = (lua_State *)Lua511::LuaDLL::luaL_newstate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_close(void* jarg1) {
  lua_State *arg1 = (lua_State *) 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  Lua511::LuaDLL::lua_close(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_luaL_openlibs(void* jarg1) {
  lua_State *arg1 = (lua_State *) 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  Lua511::LuaDLL::luaL_openlibs(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_luaL_loadstring(void* jarg1, char * jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Lua511::LuaDLL::luaL_loadstring(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_luaL_dostring(void* jarg1, char * jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Lua511::LuaDLL::luaL_dostring(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_dostring(void* jarg1, char * jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Lua511::LuaDLL::lua_dostring(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_createtable(void* jarg1, int jarg2, int jarg3) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Lua511::LuaDLL::lua_createtable(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_newtable(void* jarg1) {
  lua_State *arg1 = (lua_State *) 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  Lua511::LuaDLL::lua_newtable(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_luaL_dofile(void* jarg1, char * jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Lua511::LuaDLL::luaL_dofile(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_getglobal(void* jarg1, char * jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  Lua511::LuaDLL::lua_getglobal(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_setglobal(void* jarg1, char * jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  Lua511::LuaDLL::lua_setglobal(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_settop(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_settop(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_pop(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_pop(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_insert(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_insert(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_remove(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_remove(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_gettable(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_gettable(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_rawget(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_rawget(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_settable(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_settable(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_rawset(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_rawset(arg1,arg2);
}


SWIGEXPORT void* SWIGSTDCALL CSharp_LuaDLL_lua_newthread(void* jarg1) {
  void* jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  lua_State *result = 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  result = (lua_State *)Lua511::LuaDLL::lua_newthread(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_resume(void* jarg1, int jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (int)Lua511::LuaDLL::lua_resume(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_yield(void* jarg1, int jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (int)Lua511::LuaDLL::lua_yield(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_setmetatable(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_setmetatable(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_getmetatable(void* jarg1, int jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (int)Lua511::LuaDLL::lua_getmetatable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_equal(void* jarg1, int jarg2, int jarg3) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)Lua511::LuaDLL::lua_equal(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_pushvalue(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_pushvalue(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_replace(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_replace(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_gettop(void* jarg1) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  result = (int)Lua511::LuaDLL::lua_gettop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_type(void* jarg1, int jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  Lua511::LuaTypes result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (Lua511::LuaTypes)Lua511::LuaDLL::lua_type(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LuaDLL_lua_isnil(void* jarg1, int jarg2) {
  unsigned int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (bool)Lua511::LuaDLL::lua_isnil(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LuaDLL_lua_isnumber(void* jarg1, int jarg2) {
  unsigned int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (bool)Lua511::LuaDLL::lua_isnumber(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LuaDLL_lua_isboolean(void* jarg1, int jarg2) {
  unsigned int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (bool)Lua511::LuaDLL::lua_isboolean(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_luaL_ref(void* jarg1, int jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (int)Lua511::LuaDLL::luaL_ref(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_ref(void* jarg1, int jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (int)Lua511::LuaDLL::lua_ref(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_rawgeti(void* jarg1, int jarg2, int jarg3) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Lua511::LuaDLL::lua_rawgeti(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_rawseti(void* jarg1, int jarg2, int jarg3) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Lua511::LuaDLL::lua_rawseti(arg1,arg2,arg3);
}


SWIGEXPORT void* SWIGSTDCALL CSharp_LuaDLL_lua_newuserdata(void* jarg1, int jarg2) {
  void* jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (void *)Lua511::LuaDLL::lua_newuserdata(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_LuaDLL_lua_touserdata(void* jarg1, int jarg2) {
  void* jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (void *)Lua511::LuaDLL::lua_touserdata(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_getref(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_getref(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_unref(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::lua_unref(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LuaDLL_lua_isstring(void* jarg1, int jarg2) {
  unsigned int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (bool)Lua511::LuaDLL::lua_isstring(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LuaDLL_lua_iscfunction(void* jarg1, int jarg2) {
  unsigned int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (bool)Lua511::LuaDLL::lua_iscfunction(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_pushnil(void* jarg1) {
  lua_State *arg1 = (lua_State *) 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  Lua511::LuaDLL::lua_pushnil(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_call(void* jarg1, int jarg2, int jarg3) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Lua511::LuaDLL::lua_call(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_pcall(void* jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)Lua511::LuaDLL::lua_pcall(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_LuaDLL_lua_tonumber(void* jarg1, int jarg2) {
  double jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (double)Lua511::LuaDLL::lua_tonumber(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LuaDLL_lua_toboolean(void* jarg1, int jarg2) {
  unsigned int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (bool)Lua511::LuaDLL::lua_toboolean(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LuaDLL_lua_tostring(void* jarg1, int jarg2) {
  char * jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = Lua511::LuaDLL::lua_tostring(arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_atpanic(void* jarg1, void * jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  Lua511::LuaCallback *arg2 = (Lua511::LuaCallback *) 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (Lua511::LuaCallback *)jarg2; 
  Lua511::LuaDLL::lua_atpanic(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_pushstdcallcfunction(void* jarg1, void * jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  Lua511::LuaCallback *arg2 = (Lua511::LuaCallback *) 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (Lua511::LuaCallback *)jarg2; 
  Lua511::LuaDLL::lua_pushstdcallcfunction(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_pushnumber(void* jarg1, double jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  double arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (double)jarg2; 
  Lua511::LuaDLL::lua_pushnumber(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_pushboolean(void* jarg1, unsigned int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  bool arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = jarg2 ? true : false; 
  Lua511::LuaDLL::lua_pushboolean(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_pushstring(void* jarg1, char * jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  Lua511::LuaDLL::lua_pushstring(arg1,(std::string const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_luaL_newmetatable(void* jarg1, char * jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Lua511::LuaDLL::luaL_newmetatable(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_getfield(void* jarg1, int jarg2, char * jarg3) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  Lua511::LuaDLL::lua_getfield(arg1,arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_luaL_getmetatable(void* jarg1, char * jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  Lua511::LuaDLL::luaL_getmetatable(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void* SWIGSTDCALL CSharp_LuaDLL_luaL_checkudata(void* jarg1, int jarg2, char * jarg3) {
  void* jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *result = 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (void *)Lua511::LuaDLL::luaL_checkudata(arg1,arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LuaDLL_luaL_getmetafield(void* jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)Lua511::LuaDLL::luaL_getmetafield(arg1,arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_luaL_loadbuffer(void* jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)Lua511::LuaDLL::luaL_loadbuffer(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_luaL_loadfile(void* jarg1, char * jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Lua511::LuaDLL::luaL_loadfile(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_error(void* jarg1) {
  lua_State *arg1 = (lua_State *) 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  Lua511::LuaDLL::lua_error(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LuaDLL_lua_checkstack(void* jarg1, int jarg2) {
  unsigned int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (bool)Lua511::LuaDLL::lua_checkstack(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_next(void* jarg1, int jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (int)Lua511::LuaDLL::lua_next(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_lua_pushlightuserdata(void* jarg1, void* jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (void *)jarg2; /* IntPtr */ 
  Lua511::LuaDLL::lua_pushlightuserdata(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_luanet_rawnetobj(void* jarg1, int jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (int)Lua511::LuaDLL::luanet_rawnetobj(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_sethook(void* jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  Lua511::LuaHook *arg2 = (Lua511::LuaHook *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (Lua511::LuaHook *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)Lua511::LuaDLL::lua_sethook(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_gethookmask(void* jarg1) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  result = (int)Lua511::LuaDLL::lua_gethookmask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_gethookcount(void* jarg1) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  result = (int)Lua511::LuaDLL::lua_gethookcount(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_getstack(void* jarg1, int jarg2, void* jarg3) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  lua_State *arg3 = (lua_State *) 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  arg3 = (lua_State *)jarg3; /* IntPtr */ 
  result = (int)Lua511::LuaDLL::lua_getstack(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_lua_getinfo(void* jarg1, char * jarg2, void* jarg3) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  std::string *arg2 = 0 ;
  lua_State *arg3 = (lua_State *) 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (lua_State *)jarg3; /* IntPtr */ 
  result = (int)Lua511::LuaDLL::lua_getinfo(arg1,(std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LuaDLL_lua_getlocal(void* jarg1, void* jarg2, int jarg3) {
  char * jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  int arg3 ;
  std::string result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (lua_State *)jarg2; /* IntPtr */ 
  arg3 = (int)jarg3; 
  result = Lua511::LuaDLL::lua_getlocal(arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LuaDLL_lua_setlocal(void* jarg1, void* jarg2, int jarg3) {
  char * jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  int arg3 ;
  std::string result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (lua_State *)jarg2; /* IntPtr */ 
  arg3 = (int)jarg3; 
  result = Lua511::LuaDLL::lua_setlocal(arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LuaDLL_lua_getupvalue(void* jarg1, int jarg2, int jarg3) {
  char * jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = Lua511::LuaDLL::lua_getupvalue(arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LuaDLL_lua_setupvalue(void* jarg1, int jarg2, int jarg3) {
  char * jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = Lua511::LuaDLL::lua_setupvalue(arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_luanet_checkudata(void* jarg1, int jarg2, char * jarg3) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)Lua511::LuaDLL::luanet_checkudata(arg1,arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LuaDLL_luaL_checkmetatable(void* jarg1, int jarg2) {
  unsigned int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (bool)Lua511::LuaDLL::luaL_checkmetatable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_LuaDLL_luanet_gettag() {
  void* jresult ;
  int *result = 0 ;
  
  result = (int *)Lua511::LuaDLL::luanet_gettag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LuaDLL_luanet_newudata(void* jarg1, int jarg2) {
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  Lua511::LuaDLL::luanet_newudata(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LuaDLL_luanet_tonetobject(void* jarg1, int jarg2) {
  int jresult ;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (lua_State *)jarg1; /* IntPtr */ 
  arg2 = (int)jarg2; 
  result = (int)Lua511::LuaDLL::luanet_tonetobject(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LuaDLL() {
  void * jresult ;
  Lua511::LuaDLL *result = 0 ;
  
  result = (Lua511::LuaDLL *)new Lua511::LuaDLL();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LuaDLL(void * jarg1) {
  Lua511::LuaDLL *arg1 = (Lua511::LuaDLL *) 0 ;
  
  arg1 = (Lua511::LuaDLL *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

